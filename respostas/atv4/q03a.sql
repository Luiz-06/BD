/*a) Crie triggers que implementem todas essas restrições de chave primária, chave estrangeira
e valores não nulos nas tabelas Pedido e Item_pedido.*/

CREATE FUNCTION not_null() 
RETURNS TRIGGER AS 
$$
    BEGIN   
        IF NEW.COD_PEDIDO IS NULL THEN 
            RAISE EXCEPTION ('Código inválido');
        END IF;

        IF NEW.COD_ITEM_PEDIDO IS NULL THEN
            RAISE EXCEPTION ('Código inválido');
        END IF;
    RETURN NEW;    
    END;
$$ LANGUAGE plpgsql;

CREATE TABLE TITULO (
    COD_TITULO SERIAL PRIMARY KEY, 
    NOME_TITULO VARCHAR(100), 
    DESC_TITULO VARCHAR(100)
);

CREATE TABLE LIVRO (
    COD_LIVRO SERIAL PRIMARY KEY, 
    COD_TITULO INT, 
    VALOR_LIVRO INT,
    QTD_ESTOQUE INT,
    FOREIGN KEY (COD_TITULO) REFERENCES TITULO(COD_TITULO)
);

CREATE TABLE FORNECEDOR (
    COD_FORNECEDOR SERIAL PRIMARY KEY, 
    NOME_FORNECEDOR VARCHAR(100),
    FONE_FORNECEDOR VARCHAR(100)
);

CREATE TABLE PEDIDO (
    COD_PEDIDO SERIAL PRIMARY KEY, 
    COD_FORNECEDOR INT, 
    HORA_PEDIDO TIME,
    DATA_PEDIDO DATE,
    VALOR_TOTAL_PEDIDO INT,
    FOREIGN KEY (COD_FORNECEDOR) REFERENCES FORNECEDOR(COD_FORNECEDOR)
);

CREATE TABLE ITEM_PEDIDO (
    COD_ITEM_PEDIDO SERIAL PRIMARY KEY, 
    COD_PEDIDO INT, 
    COD_LIVRO INT,
    FOREIGN KEY (COD_PEDIDO) REFERENCES PEDIDO(COD_PEDIDO),
    FOREIGN KEY (COD_LIVRO) REFERENCES LIVRO(COD_LIVRO)
);

CREATE TRIGGER NOT_NULL_PEDIDO 
BEFORE
INSERT OR UPDATE ON PEDIDO
FOR EACH ROW
EXECUTE FUNCTION not_null();

CREATE TRIGGER NOT_NULL_ITEM 
BEFORE
INSERT OR UPDATE ON ITEM
FOR EACH ROW
EXECUTE FUNCTION not_null();


